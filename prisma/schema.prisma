generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  phone     String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  carts  Cart[]
  orders Order[]

  @@map("customers")
}

model Seller {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  document  String   @unique
  phone     String
  address   String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]

  @@map("sellers")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int
  sellerId    String
  categories  String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  seller Seller @relation(fields: [sellerId], references: [id])

  cartItems CartItem[]
  orderItems OrderItem[]

  @@map("products")
}

model Cart {
  id         String   @id @default(uuid())
  customerId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id])
  items    CartItem[]

  @@map("carts")
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("cart_items")
}

model Order {
  id              String      @id @default(uuid())
  customerId      String
  status          String
  shippingAddress String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  customer Customer @relation(fields: [customerId], references: [id])
  items    OrderItem[]
  payment  Payment?

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Payment {
  id             String   @id @default(uuid())
  orderId        String   @unique
  amount         Float
  method         String
  status         String
  paymentDetails Json
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id])

  @@map("payments")
}